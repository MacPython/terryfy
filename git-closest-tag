#!/usr/bin/env python
# vim: ft=python
""" Get tag with fewest commits from given branch

Usage:

    git-closest-tag [commit-ish]

To get closest tag to current HEAD

    git-closest-tag

To get closest tag to origin/master

    git-closest-tag origin/master
"""
# Requires at least Python 2.7
from __future__ import print_function

import sys
from subprocess import check_output


def backtick(cmd):
    """ Get command output as stripped string """
    output = check_output(cmd)
    return output.decode('latin1').strip()


def main():
    # Get commit-ish from passed command arguments, HEAD is default
    try:
        target_ref = sys.argv[1]
    except IndexError:
        target_ref = 'HEAD'
    # SHA1 for target reference
    target_commit = backtick(['git', 'rev-parse', target_ref])
    # List of tags as string
    tags_str = backtick(['git', 'tag'])
    min_distance = None
    for line in tags_str.split('\n'):
        tag = line.strip()
        # Check for case where tag and target are the same
        tag_commit = backtick(['git', 'rev-parse', tag])
        if tag_commit == target_commit:
            print(tag)
            break
        # The commits along target branch since the root of the branch that the
        # tag is on
        commit_range = '{}..{}'.format(tag, target_commit)
        commits = backtick(['git', 'log', '--oneline', commit_range])
        if commits == '': # target commit earlier in history than tag
            continue
        distance = len(commits.split('\n'))
        if min_distance is None or distance < min_distance:
            closest_tag = tag
            min_distance = distance
    else:
        if min_distance is None:
            raise RuntimeError('Cannot find tag distances')
        print(closest_tag)


if __name__ == '__main__':
    main()
