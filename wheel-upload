#!/usr/bin/env python
""" Download wheels from upstream URL, upload with twine
"""
from __future__ import print_function, absolute_import

import os
from os.path import join as pjoin, splitext, exists
import sys
import re
from optparse import OptionParser, Option
if sys.version_info[0] >= 3:
    from urllib.request import urlopen, urlretrieve
else:
    from urllib import urlretrieve
    from urllib2 import urlopen
from subprocess import check_call, PIPE

# From `pip install beautifulsoup4`
from bs4 import BeautifulSoup

__version__ = '0.1'

RACKSPACE_URL='http://wheels.scikit-image.org'

WHEEL_RE = re.compile('^.*\.whl$')
# look for a link + a timestamp + a size ('-' for dir)
APACHE_DIR_RE = re.compile('href="([^"]*)".*(..-...-.... ..:..).*?(\d+[^\s<]*|-)')

def get_wheel_names(url):
    """ Get wheel names from HTML directory listing
    """
    # This is almost certainly specific to the Rackspace directory
    html = urlopen(url).read()
    soup = BeautifulSoup(html)
    table = soup.find('table')
    if table:
        return [cell.text for cell in
                table.findAll(attrs='colname', text=WHEEL_RE)]
    # Try an apache directory parser from:
    # http://stackoverflow.com/questions/686147/url-tree-walker-in-python
    listing = APACHE_DIR_RE.findall(html)
    return [name for name, date, size in listing if WHEEL_RE.match(name)]


def main():
    parser = OptionParser(
        usage="%s WHEEL_ROOT\n\n" % sys.argv[0] + __doc__,
        version="%prog " + __version__)
    parser.add_option(
        Option("-u", "--wheel-url", type='string', default=RACKSPACE_URL,
               help="URL for directory containing wheels for uploading "
               "[default %default]"))
    parser.add_option(
        Option("-w", "--wheel-dir",
               action="store", type='string', default=os.getcwd(),
               help="Directory to store delocated wheels [defaults to "
               "current working directory]"))
    parser.add_option(
        Option("-t", "--wheel-type",
               action="store", type='string', default="macosx",
               help="Restrict type of wheels to download "
               "[default %default], one of 'macosx', 'win', 'linux'"))
    parser.add_option(
        Option("-c", "--clobber",
               action="store_true",
               help="Overwrite pre-existing wheels"))
    parser.add_option(
        Option("-n", "--no-twine",
               action="store_true",
               help="Do not upload wheels with twine"))
    parser.add_option(
        Option("-v", "--verbose",
               action="store_true",
               help="Give more feedback"))
    (opts, wheel_roots) = parser.parse_args()
    if len(wheel_roots) < 1:
        parser.print_help()
        sys.exit(1)
    try:
        check_call(['twine', '-h'], stdout=PIPE)
    except OSError:
        raise RuntimeError('Please install "twine" utility')
    wheel_names = get_wheel_names(opts.wheel_url)
    copied_wheels = []
    found_wheels = []
    for wheel_root in wheel_roots:
        for wheel_name in wheel_names:
            if not wheel_name.startswith(wheel_root):
                continue
            root, ext = splitext(wheel_name)
            project, version, pyv, pycv, plat = root.split('-')
            if not opts.wheel_type in plat:
                continue
            wheel_url = '{0}/{1}'.format(opts.wheel_url, wheel_name)
            wheel_path = pjoin(opts.wheel_dir, wheel_name)
            found_wheels.append(wheel_path)
            if exists(wheel_path) and not opts.clobber:
                if opts.verbose:
                    print('Not overwriting {0}'.format(wheel_path))
                continue
            if opts.verbose:
                print("Downloading {0} to {1}".format(wheel_url, wheel_path))
            urlretrieve(wheel_url, wheel_path)
            copied_wheels.append(wheel_path)
        if found_wheels:
            if opts.no_twine:
                if opts.verbose:
                    print("Found wheels but not uploading because of "
                          "--no-twine flag\n{0}".format(
                          '\n'.join(found_wheels)))
            else:
                check_call(['twine', 'upload'] + found_wheels)
        elif opts.verbose:
            print('Found no wheels at {0} for {1} and type {2}'.format(
                opts.wheel_url, ', '.join(wheel_roots), opts.wheel_type))


if __name__ == '__main__':
    main()
